# import modules in the parent directory
import sys
sys.path.append('..')
from HpoDatabase import HpoDatabase
import os
import json
import random

db_path = '../hpo_chroma_db'
obo_path = '../hp.obo'
whoosh_path = '../hpo_whoosh_db'
hpo_db = HpoDatabase(db_path, obo_path,whoosh_path)
# # test query
# query = "muscle weakness"
# results = hpo_db.query_hpo(query)
# hpo_id, hpo_name = hpo_db.parse_results(results)
# print(hpo_id, hpo_name)


# load all synonyms generated by GPT-4o-mini
synonym_folder = '/Users/cl3720/Desktop/hpo-parser-fine-tuned-gemini/hpo_synonyms/gpt-4o-mini-2024-07-18'

expanded_hpo_name_dict = {}
if os.path.exists(synonym_folder):
# load the synonyms from the folder
# each file in the folder is a json file with the following format {"HP:XXXX": ["synonym1", "synonym2", "synonym3"]}
    for file in os.listdir(synonym_folder):
        with open(os.path.join(synonym_folder, file), "r") as f:
            expanded_hpo_name_dict.update(json.load(f))
len(expanded_hpo_name_dict)
print(f"There are {len(expanded_hpo_name_dict)} HPO terms with synonyms")


# query with synonyms and store the id.
query_results = {}
i = 0
for hp_id in expanded_hpo_name_dict:
    i += 1
    if i % 1000 == 0:
        print(f"Processed {i} HPO terms")       
    query_results[hp_id] = []
    for synonym in expanded_hpo_name_dict[hp_id]:
        # create a random indicator p (0,1) to decide whether to query the synonym
        # p = random.random()
        # if p > 0.01:
        #     # takes ~5 minutes to query 500 HPO terms
        #     # on average, it takes 0.6 seconds to query one HPO term
        #     # so it will take 0.6 * 18000 / 3600 = 3 hours to query all HPO terms
        #     continue
        results = hpo_db.query_hpo(synonym, use_chromdb=False)
        hit_hpo_id, _ = hpo_db.parse_results(results, use_chromdb=False)
        if hit_hpo_id:
            query_results[hp_id].append(hit_hpo_id)
        else:
            print(f"No HPO id found for {synonym}")
            query_results[hp_id].append(None)
print(f"Finished querying {i} HPO terms")

# write the query results to a json file
with open('./rag_evaluation_query_results_top1_whoosh.json', 'w') as f:
    json.dump(query_results, f)
    
print("Query results saved to rag_evaluation_query_results_top1_whoosh.json")